// Decode Ways - medium - 14/08/2023

// Intuitive solution

public int numDecodings(String s) {
        int[] dp = new int[s.length() + 1];
        Arrays.fill(dp, 1);

        for (int i = dp.length - 2; i >= 0; i--) {
            if (s.charAt(i) == '0') dp[i] = 0;
            else {
                dp[i] = dp[i+1];
                if (i + 2 < dp.length && (s.charAt(i) == '1' || (s.charAt(i) == '2' && s.charAt(i+1) < '7'))) {
                    dp[i] += dp[i+2];
                }
            }
        }

        return dp[0];
}

// Tabulation

 public int numDecodings(String s) {
        if(s == null || s.length()==0){
            return 0;
        }
        int n = s.length();
        int[] dp = new int[n+1];

        dp[0] = 1;
        dp[1] = s.charAt(0) != '0' ? 1 : 0;

        for(int i=2; i<=n; i++){
            int first = Integer.valueOf(s.substring(i-1, i));
            int second = Integer.valueOf(s.substring(i-2, i));
            if(first >= 1 && first <= 9){
                dp[i] += dp[i-1];
            }
            if(second >= 10 && second <= 26){
                dp[i] += dp[i-2];
            }
        }
        return dp[n];
  }


// Understandable

   int[] dp;
    private int solve(String s, int i){
        if( i >= s.length())return 1;
        if(dp[i] != 0){
            return dp[i];
        }
        int ans = 0;
        int op1 = s.charAt(i) - '0';
        int op2 = 0;
        if(i < s.length()-1){
            op2 = op1*10 + s.charAt(i+1)-'0';
        }
        if(op1 > 0)ans += solve(s, i+1);
        if(op2 > 0 && op1 > 0 && op2 <= 26){
            ans += solve(s, i+2);
        }
        return dp[i] = ans;
    }
public int numWays(String s){
        return solve(s, 0);
}

// 2nd tabulation

public int numDecodings(String s) {
        dp = new int[s.length()+2];
        int n = s.length();
        dp[n+1] = 1;
        dp[n] = 1;

        for(int i=n-1; i>=0; i--){
            int op1 = s.charAt(i)-'0', op2 = 0;
            if(i < s.length()-1){
                op2 = op1 * 10 + s.charAt(i+1)-'0';
            }
            if(op1 > 0){
                dp[i] += dp[i+1];
            }
            if(op2 >0 && op1 > 0 && op2 <=26){
                dp[i] += dp[i+2];
            }
        }
        return dp[0];
    }
