// Distinct subsequences - hard - 31/08/2023

// Memoization
//     Time Complexity: O(N*M) => Reason: There are N*M states therefore at max ‘N*M’ new problems will be solved.
//     Space Complexity: O(N*M) + O(N+M) => Reason: We are using a recursion stack space(O(N+M)) and a 2D array ( O(N*M)).

class Solution {
    int memo[][];
    public int numDistinct(String s, String t) {
        memo=new int[s.length()][t.length()];
        for(int[] row: memo){
            Arrays.fill(row,-1);
        }
        return numDistinct(s,t,s.length()-1,t.length()-1);
    }
    public int numDistinct(String s, String t , int i, int j) {
          if(j<0){
              return 1;
          }
          if(i<0){
              return 0;
          }
          if(memo[i][j]!=-1){
              return memo[i][j];
          }
          if(s.charAt(i)==t.charAt(j)){
              return memo[i][j] = numDistinct(s,t,i-1,j-1)+numDistinct(s,t,i-1,j);
          }
          return memo[i][j] = numDistinct(s,t,i-1,j);
    }    
}

// Tabulation
//     Time Complexity: O(N*M) => Reason: There are two nested loops
//     Space Complexity: O(N*M) => Reason: We are using an external array of size ‘N*M’. Stack Space is eliminated.
class Solution {
    public int numDistinct(String s, String t) {
        int dp[][]=new int[s.length()+1][t.length()+1];
        for(int i=0; i<dp[0].length ; i++){
            dp[0][i]=0;
        }
        for(int i=0; i<dp.length ; i++){
            dp[i][0]=1;
        }
        for(int i=1; i<dp.length ; i++){
            for(int j=1; j<dp[0].length ; j++){
                if(s.charAt(i-1)==t.charAt(j-1)){
                    dp[i][j] = dp[i-1][j-1]+dp[i-1][j];
                }else{
                    dp[i][j] = dp[i-1][j]; 
                }           
            }
        }
        return dp[s.length()][t.length()];
    }    
}

// Space Optimized
//     Time Complexity: O(N*M) => Reason: There are two nested loops.
//     Space Complexity: O(M) => Reason: We are using an external array of size ‘M+1’ to store only one row.
class Solution {
    
public int prime =(int)(Math.pow(10,9)+7);
    public int numDistinct(String s1, String s2) {
    // Write your code here.
    int n = s1.length();
    int m = s2.length();
    int[] prev=new int[m+1];
    prev[0]=1;
    
    for(int i=1;i<n+1;i++){
        for(int j=m;j>=1;j--){ // Reverse direction
            
            if(s1.charAt(i-1)==s2.charAt(j-1))
                prev[j] = (prev[j-1] + prev[j])%prime;
            else
                prev[j] = prev[j]; //can omit this statemwnt
        }
    }
    return prev[m];
} 
}
