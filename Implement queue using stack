// Implement queue using stack - easy - 07/08/2023

// Approach - 1 push - O(1), pop - O(1) amortized
class MyQueue {
    Stack<Integer> s1 ;
    Stack<Integer> s2 ;
    public MyQueue() {
        s1 = new Stack<Integer>();
        s2 = new Stack<Integer>();
    }

    private int front;

    public void push(int x) {
        if(s1.isEmpty()){
            front = x;
        }
        
        s1.push(x);
        
    }
    
    public int pop() {
        
       if(s2.isEmpty()){
           while(!s1.isEmpty()){
               s2.push(s1.pop());
           }
       }
        return s2.pop();
    }
    
    public int peek() {
        if(!s2.isEmpty()){
            return s2.peek();
        }
        return front;
    }
    
    public boolean empty() {
        return s1.isEmpty() && s2.isEmpty();
    }
}

// Approach 2 - push- O(n), pop - O(1)

class MyQueue {
    Stack<Integer> s1 ;
    Stack<Integer> s2 ;
    public MyQueue() {
        s1 = new Stack<Integer>();
        s2 = new Stack<Integer>();
    }

    private int front;

    public void push(int x) {
        if(s1.isEmpty()){
            front = x;
        }
        while(!s1.isEmpty()){
            s2.push(s1.pop());
        }
        s2.push(x);
        while(!s2.isEmpty()){
            s1.push(s2.pop());
        }
    }
    
    public int pop() {
        int res = s1.pop();
        if(!s1.isEmpty()){
            front = s1.peek();
        }
        return res;
    }
    
    public int peek() {
        return front;
    }
    
    public boolean empty() {
        return s1.isEmpty();
    }
}
