// K closest points to origin - east - 05/08/2023

class Dist implements Comparable<Dist>{
    int dist;
    int x;
    int y;
    int i;
    public Dist(int x, int y, int dist, int i){
        this.x = x;
        this.y = y;
        this.dist = dist;
        this.i = i;
    }
    @Override
    public int compareTo(Dist p2){
        return this.dist-p2.dist;
    }
}

class Solution {
    public int[][] kClosest(int[][] points, int k) {
        PriorityQueue<Dist> pq = new PriorityQueue<>();
        for(int i=0; i<points.length; i++){
            int dist = (points[i][0]*points[i][0]) + (points[i][1]*points[i][1]);
            pq.add(new Dist(points[i][0], points[i][1],dist,i));
        }
        int[][] ans = new int[k][];
        for(int i=0; i<k; i++){
            Dist point = pq.remove();
            ans[i] = new int[]{points[point.i][0], points[point.i][1]};
        }
        return ans;
    }
}
