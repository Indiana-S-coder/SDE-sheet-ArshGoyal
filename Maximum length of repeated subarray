// Maximum length of repeated subarray - medium - 14/08/2023

// Tabulation space - O(n^2)
 public int findLength(int[] nums1, int[] nums2) {
        int[][] dp = new int[nums1.length+1][nums2.length+1];
        int ans = 0;
        for(int i=1; i<nums1.length+1; i++){
            for(int j=1; j<nums2.length+1; j++){
                if(nums1[i-1] == nums2[j-1]){
                    dp[i][j] = dp[i-1][j-1] + 1;
                }else {
                    dp[i][j] = 0;
                }
                ans = Math.max(ans, dp[i][j]);
            }
        }

        return ans;
  }

// Tabulation space - O(n)

 public int findLength(int[] nums1, int[] nums2) {
        int n = nums1.length, m = nums2.length;
        int prev[] = new int[n+1];
        int ans = 0;
        for(int i = 1 ; i <= n ; i++){
            int cur[] = new int[n+1];
            for(int j = 1 ; j <= m ; j++){
                if(nums1[i-1]==nums2[j-1])
                   cur[j] = prev[j-1]+1;
                else
                    cur[j] = 0;
                ans = Math.max(ans, cur[j]);
            }
            prev = cur;
        }
        return ans;
  }
