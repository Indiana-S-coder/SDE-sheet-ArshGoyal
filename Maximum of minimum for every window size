// Maximum of minimum for every window size - hard - 10/08/2023

class Solution 
{
    static int[] SmallerElements(int[] arr , int n , boolean flag)
    {
        Stack<Integer> stack = new Stack<>();
        int[] new_arr = new int[n];
        int value = -1;
        if(flag == true)
            value = n;
        for(int i = 0;i<n;i++)
            new_arr[i] = value;
        for(int i = (flag == true)?0:n-1;(flag == true)?i<n:i>=0;i =(flag == true)?i+1:i-1)
        {
            while(stack.size()!=0 && arr[i] < arr[stack.peek()])
            {
                new_arr[stack.pop()] = i; 
            }
            stack.push(i);
        }
        
        return new_arr;
    }
    // Function to find maximum of minimums of every window size.
    static int[] maxOfMin(int[] arr, int n) {
        int[] left = SmallerElements(arr,n,false);
        int[] right = SmallerElements(arr,n,true);
        int[] output = new int[n+1];
        for(int i = 0;i<n;i++)
        {
            int length = right[i] - left[i] -1;
            output[length] = Math.max(output[length],arr[i]);
        }
        for(int i = n-1;i>0;i--)
            output[i] = Math.max(output[i],output[i+1]);
        return Arrays.copyOfRange(output,1,n+1);
    }
}
