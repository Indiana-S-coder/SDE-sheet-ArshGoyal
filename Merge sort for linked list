// Merge sort for linked list - hard - 02/08/2023

class Solution
{
    static Node findMid(Node head){
        Node slow = head;
        Node fast = head.next;
        
        while(fast != null && fast.next != null){
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }
    static Node merge(Node left, Node right){
        Node ans = new Node(-1);
        Node temp = ans;
        
        while(left!=null && right!=null){
            if(left.data < right.data){
                temp.next = left;
                left = left.next;
                temp = temp.next;
            }
            else {
                temp.next = right;
                right = right.next;
                temp = temp.next;
            }
        }
        while(left != null){
            temp.next = left;
            left = left.next;
            temp = temp.next;
        }
        
        while(right != null){
            temp.next = right;
            right = right.next;
            temp = temp.next;
        }
        
        ans = ans.next;
        return ans;
        
    }
    //Function to sort the given linked list using Merge Sort.
    static Node mergeSort(Node head)
    {
        if(head == null || head.next == null){
            return head;
        }
        
        
        Node mid = findMid(head);
        
        Node left = head;
        Node right = mid.next;
        mid.next = null;
        
        left = mergeSort(left);
        right = mergeSort(right);
        
        Node result = merge(left, right);
        
        return result;
    }
}
