// Minimum path sum - medium - 12/08/2023

// Approach 1 - Recursion + memoization
int solve(int i,int j,int[][]gr,int[][]dp)
    {
        if(i==0&&j==0)
        {   
            dp[i][j]=gr[i][j];
            return dp[i][j];
        }
        if(i<0||j<0)return Integer.MAX_VALUE;
        if(dp[i][j]!=0)return dp[i][j];
        int up=f(i-1,j,gr,dp);
        int ri=f(i,j-1,gr,dp);
        dp[i][j]=gr[i][j]+Math.min(up,ri);
        return dp[i][j];

    }
    int dp[][];
    public int minPathSum(int[][] grid) {
        int m=grid.length;
        int n=grid[0].length;
        dp = new int[m][n];
        return solve(m-1,n-1,grid,dp);
    }

// Approach 2 - Bottom-up approach (Tabulation)

public int minPathSum(int[][] grid) {
        int m = grid.length, n = grid[0].length;
        
        int dp[][] = new int[m][n];
        dp[0][0] = grid[0][0];
        for(int i=1; i<m; i++){
            dp[i][0] = grid[i][0] + dp[i-1][0];
        }

        for(int i=1; i<n; i++){
            dp[0][i] = grid[0][i] + dp[0][i-1];
        }

        for(int i=1; i<m; i++){
            for(int j=1; j<n; j++){
                dp[i][j] = grid[i][j] + Math.min(dp[i-1][j], dp[i][j-1]);
            }
        }
        return dp[m-1][n-1];
  }
