// Mobile numeric keypad - medium - 15/08/2023

class Solution
{
    int[][] keypad = {
        {1, 2, 3},
        {4, 5, 6},
        {7, 8, 9},
        {-1, 0, -1}
    };
    int[] dx = {0, 0, -1, 1};
    int[] dy = {1, -1, 0, 0};
    
	public long getCount(int N)
	{
	    long[][] dp = new long[10][N+1];
	    long ans = 0;
	    
	    for(int i=0; i<10; i++){
	        for(int j=0; j<N+1; j++){
	            dp[i][j] = -1;
	        }
	    }
	    
	    for(int i=0; i<4; i++){
	        for(int j=0; j<3; j++){
	            if(keypad[i][j] != -1){
	                ans += solve(i, j, N, dp);
	            }
	        }
	    }
		return ans;
	}
	
	private long solve(int i, int j, int N, long[][] dp){
	    
	    if(N==1) return 1;
	    
	    if(dp[keypad[i][j]][N] != -1) return dp[keypad[i][j]][N];
	    
	    long ans = 0;
	    
	    ans += solve(i, j, N-1, dp);
	    
	    for(int k=0; k<4; k++){
	        int nx = i + dx[k];
	        int ny = j + dy[k];
	        
	        if(nx>=0 && ny>=0 && nx<4 && ny<3 && keypad[nx][ny] != -1){
	            ans += solve(nx, ny, N-1, dp);
	        }
	    }
	    
	    return dp[keypad[i][j]][N] = ans;
	}
}
