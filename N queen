// N queen - medium = 15/08/2023

class Solution {
    boolean isSafe(char[][] board, int row, int col){
        for(int i=0; i<board[0].length; i++){
            if(board[row][i] == 'Q'){
                return false;
            }
        }
        for(int i=0; i<board.length; i++){
            if(board[i][col] == 'Q'){
                return false;
            }
        }

        // upper left
        int r = row;
        for(int c = col; c>=0 && r>=0; c--, r--){
            if(board[r][c] == 'Q'){
                return false;
            }
        }

        // upper right
        r = row;
        for(int c = col; c<board.length && r>=0; c++, r--){
            if(board[r][c] == 'Q'){
                return false;
            }
        }

        //lower left
        r = row;
        for(int c = col; c>=0 && r<board.length; c--, r++){
            if(board[r][c] == 'Q'){
                return false;
            }
        }

        // lower right
        r = row;
        for(int c = col; c<board.length && r<board.length; c++, r++){
            if(board[r][c] == 'Q'){
                return false;
            }
        }
        return true;
    }

    private void saveAns(List<List<String>> ans, char[][] board){
        String row = "";
        List<String> newBoard = new ArrayList<>();

        for(int i=0; i<board.length; i++){
            row = "";
            for(int j=0; j<board[0].length; j++){
                if(board[i][j] == 'Q'){
                    row += 'Q';
                }else {
                    row += '.';
                }
            }
            newBoard.add(row);
        }
        ans.add(newBoard);
    }

    private void solve(char[][] board, List<List<String>> ans, int col){
        if(col == board.length){
            saveAns(ans, board);
            return ;
        }

        for(int row = 0; row < board.length; row++){
            if(isSafe(board, row, col)){
                board[row][col] = 'Q';
                solve(board, ans, col+1);
                board[row][col] = '.';
            }
        }
    }
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> ans = new ArrayList<>();
        char[][] board = new char[n][n];

        solve(board, ans, 0);

        return ans;
    }
}
