// Next greater element I - easy - 08/08/2023

// Approach 1 - 2 for loops EASY TO UNDERSTAND
public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        Map<Integer, Integer> map = new HashMap<>();
        
        for(int i=0; i<nums2.length; i++){
            for(int j=i; j<nums2.length; j++){
                if(nums2[j] > nums2[i]){
                    map.put(nums2[i], nums2[j]);
                    break;
                }else if(j == nums2.length-1){
                    map.put(nums2[i], -1);
                }
            }
        }
        for(int i=0; i<nums1.length; i++){
            nums1[i] = map.get(nums1[i]);
        }
        return nums1;
    }

//Approach 2 - STACK and MAP
 public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        Map<Integer, Integer> map = new HashMap<>();
        Stack<Integer> st = new Stack<>();

        for(int i=nums2.length-1; i>=0; i--){
            if(st.isEmpty()){
                map.put(nums2[i], -1);
            }
            else 
                if(!st.isEmpty() && nums2[i] < st.peek()){
                    map.put(nums2[i], st.peek());
                }
                else {
                    while(!st.isEmpty() && nums2[i]>=st.peek()){
                        st.pop();
                    }
                    if(st.isEmpty()){
                        map.put(nums2[i], -1);
                    }
                    else {
                        map.put(nums2[i], st.peek());
                    }
            }
                st.push(nums2[i]);
        }
        int ans[] = new int[nums1.length];
        for(int i=0; i<nums1.length; i++){
            ans[i] = map.get(nums1[i]);
        }
        return ans;
}
