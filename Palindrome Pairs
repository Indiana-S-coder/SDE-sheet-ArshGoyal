// Palindrome Pairs - hard - 31/08/2023

class Solution {
    public List<List<Integer>> palindromePairs(String[] words) {
        //1- null + palindrome, palindrome + null
        //2- s1 + s1.reverse
        //3- [s1,s2] + s1.reverse, s2 is palindrome
        //4- s2.reverse + [s1,s2], s1 is palindrome

        //optimize:
        //1- dp & cache for isPalindrome
        //2- Trie for find if reverse exist

        List<List<Integer>> res = new ArrayList<>();

        //store all words in dict
        HashMap<String, Integer> map = new HashMap<>();
        boolean[] dict = new boolean[5001];
        int cnt = 0;
        for (String word : words) {
            map.put(word, cnt);
            cnt++;
            dict[word.length()] = true; //用于剪枝
        }

        for (int i = 0; i < words.length; i++) {
            String word = words[i];
            if (word.length() > 0) {
                char[] ch = word.toCharArray();

                String re = new StringBuilder(word).reverse().toString();

                //3- 对当前字符串的后半部分取公共palindrome，前半部分颠倒找hashmap
                for (int j = 0; j < ch.length - 1; j++) {
                    if (dict[j + 1] && isPalindrome(ch, j + 1, ch.length - 1)) {
                        String check = re.substring(ch.length - j - 1, ch.length);

                        if (map.containsKey(check)) {
                            //if(map.get(check) != i)
                            res.add(Arrays.asList(i, map.get(check)));
                        }
                    }
                }

                //4- 对当前字符串的前半部分取公共palindrome，后半部分颠倒找hashmap
                for (int j = 0; j < ch.length - 1; j++) {

                    if (dict[ch.length - j - 1] && isPalindrome(ch, 0, j)) {
                        String check = re.substring(0, ch.length - j - 1);

                        if (map.containsKey(check)) {
                            //if(map.get(check) != i)
                            res.add(Arrays.asList(map.get(check), i));
                        }
                    }
                }

                //1- null + palindrome, palindrom + null
                //2- s1 + s1.reverse
                if (isPalindrome(ch, 0, ch.length - 1)) {
                    if (map.containsKey("")) {
                        int index = map.get("");
                        res.add(Arrays.asList(index, i));
                        res.add(Arrays.asList(i, index));
                    }
                } else if (map.containsKey(re)) {
                    res.add(Arrays.asList(i, map.get(re)));
                }
            }
        }
        return res;
    }

    //[left, right]
    // can be improved by dynamic programming, but need extra space to store the answer of subproblem
    private boolean isPalindrome(char[] ch, int left, int right) {
        while (left < right) {
            if (ch[left] != ch[right])
                return false;
            left++;
            right--;
        }
        return true;
    }
}

// Easy to understand

class Solution {
    public static class Trie {
    int pos;
    Trie[] nodes;   // consider xyxabc. if current trie is 'a'. Then a.nodes has information. It means string after a is palindrome
    List<Integer> palins;
    public Trie() {
        pos = -1;
        nodes = new Trie[26];
        palins = new ArrayList<>();
    }
}

public static void add(Trie root, String word, int pos) {
    for (int i = word.length() - 1; i >= 0; i--) {
        char ch = word.charAt(i);
        if (isPalindrome(word, 0, i)) { // check if substring(0, i) is palindrome.
            root.palins.add(pos);
        }
        if (root.nodes[ch - 'a'] == null) {
            root.nodes[ch - 'a'] = new Trie();
        }
        root = root.nodes[ch - 'a'];
    }
    root.pos = pos; // if it is xyxcba. Until now, the node should be at x.
    root.palins.add(pos);
}

public static void search(Trie root, String[] words, int i, List<List<Integer>> ans) {
    int len = words[i].length();
    for (int j = 0; j < len && root != null; j++) {
        if (root.pos >= 0 && i != root.pos && isPalindrome(words[i], j, len - 1)) {
            ans.add(Arrays.asList(new Integer[] {i, root.pos}));
        }
        char ch = words[i].charAt(j);
        root = root.nodes[ch - 'a'];
    }
    if (root != null && root.palins.size() > 0) { // assume 'xyxabc' is in trie, now try 'cba'
        for (int j : root.palins) {
            if (j != i) {
                ans.add(Arrays.asList(new Integer[] {i, j}));
            }
        }
    }
}

public static List<List<Integer>> palindromePairs(String[] words) {
    List<List<Integer>> ans = new ArrayList<>();
    Trie trie = new Trie();
    for (int i = 0; i < words.length; i++) {
        add(trie, words[i], i);
    }
    for (int i = 0; i < words.length; i++) {
        search(trie, words, i, ans);
    }
    return ans;
}

public static boolean isPalindrome(String str, int i, int j) {
    while (i < j) {
        if (str.charAt(i++) != str.charAt(j--)) {
            return false;
        }
    }
    return true;
}
}
