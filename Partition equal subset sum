// Partition Equal Subset sum - madium - 28/08/2023

// Backtracking
class Solution{
    static boolean findPartition(int arr[], int n, int sum) {
        if (sum == 0)
            return true;
        if (n == 0)
            return false;
        //currSum += arr[n-1];
        boolean res = findPartition(arr, n - 1, sum - arr[n - 1]);
        if (res)
            return true;
        //currSum -= arr[n-1];
        res = findPartition(arr, n - 1, sum);
        return res;
}

    static int equalPartition(int N, int arr[]) {
        int sum = 0;
        for (int i = 0; i < N; i++)
            sum += arr[i];
        if (sum % 2 != 0)
            return 0;
        
        if (findPartition(arr, N, sum / 2))
            return 1;
        return 0;
    }
}

// bottom-up approach

class Solution{
     static boolean subsetSum(int[] arr,int sum){
        boolean dp[][]=new boolean[arr.length+1][sum+1];
        for(int i=0;i<=arr.length;i++) dp[i][0]=true;
        for(int j=1;j<=sum;j++) dp[0][j]=false;
        
        for(int i=1;i<=arr.length;i++){
            for(int j=1;j<=sum;j++){
                if(arr[i-1]<=j){
                    dp[i][j]=dp[i-1][j] || dp[i-1][j-arr[i-1]];
                }
                else{
                    dp[i][j]=dp[i-1][j];
                }
            }
        }
        return dp[arr.length][sum];
    }
    
    static int equalPartition(int N, int arr[]) {
         int sum=0;
        for(int i=0;i<N;i++){
            sum+=arr[i];
        }
        if(sum%2==0){
            if(subsetSum(arr,sum/2))
            return 1;
            else 
            return 0;
        }
        else return 0;
    }
}
