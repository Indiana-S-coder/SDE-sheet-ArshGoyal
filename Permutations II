// Permutations II - medium - 28/08/2023

class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        HashSet<List<Integer>> set = new HashSet<>();

        backtrack(res, nums, 0, set);
        return res;
    }

    public void backtrack(List<List<Integer>> res, int[] nums, int index, HashSet<List<Integer>> set) {
        if (index == nums.length) {
            List<Integer> current = toList(nums);
            if (!set.contains(current)) {
                res.add(current);
                set.add(current);
            }
        } else {
            for (int i = index; i < nums.length; i++) {
                swap(index, i, nums);
                backtrack(res, nums, index + 1, set);
                swap(index, i, nums);
            }
        }
    }

    public void swap(int m, int n, int[] nums) {
        int temp = nums[m];
        nums[m] = nums[n];
        nums[n] = temp;
    }

    public List<Integer> toList(int[] nums) {
        ArrayList<Integer> l = new ArrayList<>();
        for (int n : nums) {
            l.add(n);
        }
        return l;
    }
}

// Approach 2 - better one and OPTIMIZED

class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        // Create a list to store the final results
        List<List<Integer>> res = new ArrayList<>();
        // Sort the input array to group duplicates together
        Arrays.sort(nums);
        // Create a boolean array to keep track of used numbers
        boolean[] used = new boolean[nums.length];
        // Call the recursive backtrack method to generate all permutations
        backtrack(nums, used, new ArrayList<>(), res);
        // Return the list of permutations
        return res;
    }
    
    private void backtrack(int[] nums, boolean[] used, List<Integer> curr, List<List<Integer>> res) {
        // If the current permutation is complete, add it to the results list
        if (curr.size() == nums.length) {
            res.add(new ArrayList<>(curr));
            return;
        }
        
        // Loop through the indices of the input array
        for (int i = 0; i < nums.length; i++) {
            // Skip if the number has already been used or if it's a duplicate that has already been used
            if (used[i] || (i > 0 && nums[i] == nums[i-1] && !used[i-1])) {
                continue;
            }
            // Mark the current number as used, add it to the current permutation list
            used[i] = true;
            curr.add(nums[i]);
            // Recursively call backtrack to generate all permutations
            backtrack(nums, used, curr, res);
            // Mark the current number as unused, remove it from the current permutation list
            used[i] = false;
            curr.remove(curr.size()-1);
        }
    }
}
