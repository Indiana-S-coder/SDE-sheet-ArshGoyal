// Recover BST - medium - 02/09/2023

// Approach 1 - TC-O(n + nlogn) SC-O(n)
Preform the inorder traversal
the list obtained will not be sorted so, sort it
Then again perform the inorder traversal and replace the node values with the values in list


// Approach 2 -  TC-O(n) SC-O(1)
class Solution {
    private TreeNode first;
    private TreeNode prev;
    private TreeNode middle;
    private TreeNode last;

    public void inOrder(TreeNode root){
        if(root == null)return ;
        
        inOrder(root.left);
        
        if(prev != null && (root.val < prev.val)){
            if(first == null){
                first = prev;
                middle = root;
            }
            else {
                last = root;
            }
        }
        prev = root;
        inOrder(root.right);
    }
    public void recoverTree(TreeNode root) {
        first = middle = last = null;
        
        prev = new TreeNode(Integer.MIN_VALUE);
        
        inOrder(root);
        
        if(first != null && last != null){
            int t = first.val;
            first.val = last.val;
            last.val = t;
        }
        else {
            if(first != null && middle != null){
                int t = first.val;
                first.val = middle.val;
                middle.val = t;
            }
        }
        
    }
}
