// Rotten Oranges - medium - 09/08/2023

class Pair{
    int first;
    int second;
    
    Pair(int a, int b){
        this.first = a;
        this.second = b;
    }
}
class Solution
{
    //Function to find minimum time required to rot all oranges. 
    public int orangesRotting(int[][] grid)
    {
        int n = grid.length;
        int m = grid[0].length;
        
        Queue<Pair> q = new LinkedList<>();
        
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(grid[i][j] == 2){
                    q.add(new Pair(i, j));
                }
            }
        }
        int[] dx = {0, 0, 1, -1};
        int[] dy = {1, -1, 0, 0};
        
        if(q.size() == 0)return 0;
        
        int count = 0;
        while(!q.isEmpty())
        {
            int size = q.size();
            while(size-- != 0){
                int a = q.peek().first;
                int b = q.peek().second;
                q.remove();
                for(int i=0; i<4; i++){
                    int na = a + dx[i];
                    int nb = b + dy[i];
                    
                    if(na < n && nb < m && na >= 0 && nb >= 0 && grid[na][nb] == 1){
                        
                        grid[na][nb] = 2;
                        q.add(new Pair(na, nb));
                        
                    }
                }
            }
            count++;
        }
        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(grid[i][j] == 1){
                    return -1;
                }
            }
        }
        return count-1;
    }
}
