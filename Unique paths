// Unique paths - medium - 12/08/2023

// Approach 1 - Recursion + memoization

class Solution {
    int[][] dp;
    private int solve(int i, int j, int m, int n){
        if(i>=m || j>=n){
            return 0;
        }

        if(i==m-1 && j==n-1){
            return 1;
        }
        if(dp[i][j] != 0){
            return dp[i][j];
        }

        return dp[i][j] = solve(i+1, j, m, n) + solve(i, j+1, m, n);
    }
    public int uniquePaths(int m, int n) {
        dp = new int[m+1][n+1];

        return solve(0, 0, m, n);
    }
}

// Approach 2 - Bottom-up approach tabulation

public int uniquePaths(int m, int n) {
        int[][] dp = new int[m][n];
        dp[0][0] = 1;

        for(int i=0; i<m; i++){
            dp[i][0] = 1;
        }
        for(int i=0; i<n; i++){
            dp[0][i] = 1;
        }

        for(int i=1; i<m; i++){
            for(int j=1; j<n; j++){
                dp[i][j] = dp[i-1][j] + dp[i][j-1];
            }
        }

        return dp[m-1][n-1];
  }
